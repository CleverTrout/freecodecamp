{
  "name": "Object Oriented Programming",
  "order": 7,
  "time": "2h",
  "note": [
    "Methods",
    "Closures",
    "Factories",
    "Pure Functions",
    "Currying Functions",
    "Functors",
    "Currying Functions"
  ],
  "challenges": [
    {
      "id":"cf1111c1c15feddfaeb1bdef",
      "title": "Declare JavaScript Objects as Variables",
      "description":[
        "Before we dive into Object Oriented Programming, let's revisit JavaScript objects.",
        "Give your <code>motorBike</code> object a <code>wheels</code>, <code>engines</code> and <code>seats</code> attribute and set them to numbers."
      ],
      "tests":[
        "assert(typeof motorBike.engines === 'number', 'message: <code>motorBike</code> should have a <code>engines</code> attribute set to a number.');",
        "assert(typeof motorBike.wheels === 'number', 'message: <code>motorBike</code> should have a <code>wheels</code> attribute set to a number.');",
        "assert(typeof motorBike.seats === 'number', 'message: <code>motorBike</code> should have a <code>seats</code> attribute set to a number.');"
      ],
      "challengeSeed":[
        "var car = {",
        "  \"wheels\":4,",
        "  \"engines\":1,",
        "  \"seats\":5",
        "};",
        "",
        "var motorBike = {",
        "",
        "  // Only change code below this line.",
        "",
        "",
        "",
        "  // Only change code above this line.",
        "",
        "};"
      ],
      "tail":[
        "(function() {return JSON.stringify(motorBike);})();"
      ],
      "solutions":[
        "var car = {\n  \"wheels\":4,\n  \"engines\":1,\n  \"seats\":5\n};\n\nvar motorBike = {\n  \"wheels\": 4,\n  \"engines\": 1,\n  \"seats\": 2\n};"
      ],
      "challengeType":1,
      "type": "waypoint"
    },
    {
      "id":"cf1111c1c15feddfaeb2bdef",
      "title": "Construct JavaScript Objects with Functions",
      "description":[
        "We are also able to create objects using <code>constructor</code> functions.",
        "A <code>constructor</code> function is given a capitalized name to make it clear that it is a <code>constructor</code>.",
        "Here's an example of a <code>constructor</code> function:",
        "<code>var Car = function() {</code>",
        "<code>&nbsp;&nbsp;this.wheels = 4;</code>",
        "<code>&nbsp;&nbsp;this.engines = 1;</code>",
        "<code>&nbsp;&nbsp;this.seats = 1;</code>",
        "<code>};</code>",
        "In a <code>constructor</code> the <code>this</code> variable refers to the new object being created by the constructor. So when we write,",
        "<code>&nbsp;&nbsp;this.wheels = 4;</code>",
        "inside of the <code>constructor</code> we are giving the new object it creates a property called <code>wheels</code> with a value of <code>4</code>.",
        "You can think of a <code>constructor</code> as a description for the object it will create.",
        "Have your <code>MotorBike</code> <code>constructor</code> describe an object with <code>wheels</code>, <code>engines</code> and <code>seats</code> properties and set them to numbers."
      ],
      "tests":[
        "assert(typeof (new MotorBike()).engines === 'number', 'message: <code>myMotorBike</code> should have a <code>engines</code> attribute set to a number.');",
        "assert(typeof (new MotorBike()).wheels === 'number', 'message: <code>myMotorBike</code> should have a <code>wheels</code> attribute set to a number.');",
        "assert(typeof (new MotorBike()).seats === 'number', 'message: <code>myMotorBike</code> should have a <code>seats</code> attribute set to a number.');"
      ],
      "challengeSeed":[
        "var Car = function() {",
        "  this.wheels = 4;",
        "  this.engines = 1;",
        "  this.seats = 1;",
        "};",
        "",
        "var myCar = new Car();",
        "",
        "// Only change code below this line.",
        "",
        "var MotorBike = function() {",
        "",
        "",
        "",
        "};"
      ],
      "tail":[
        "var myMotorBike = new MotorBike();",
        "(function() {return JSON.stringify(myMotorBike);})();"
      ],
      "solutions":[
        "var Car = function() {\n  this.wheels = 4;\n  this.engines = 1;\n  this.seats = 1;\n};\n\nvar myCar = new Car();\n\nvar MotorBike = function() {\n  this.engines = 1;\n  this.seats = 1;\n  this.wheels = 4;\n};\n\nvar myMotorBike = new MotorBike();"
      ],
      "challengeType":1,
      "type": "waypoint"
    },
    {
      "id":"cf1111c1c15feddfaeb4bdef",
      "title":"Make Instances of Objects with a Constructor Function",
      "description":[
        "Now let's put that great <code>constructor</code> function we made in the last lesson to use!",
        "To use a <code>constructor</code> function we call it with the <code>new</code> keyword in front of it like:",
        "<code>var myCar = new Car();</code>",
        "<code>myCar</code> is now an <code>instance</code> of the <code>Car</code> constructor that looks like the object it described:",
        "<code>{</code>",
        "<code>&nbsp;&nbsp;wheels: 4,</code>",
        "<code>&nbsp;&nbsp;engines: 1,</code>",
        "<code>&nbsp;&nbsp;seats: 1</code>",
        "<code>}</code>",
        "Note that it is important to use the <code>new</code> keyword when calling a constructor. This is how Javascript knows to create a new object and that all the references to <code>this</code> inside the constructor should be referring to this new object.",
        "Now, once the <code>myCar</code> <code>instance</code> is created it can be used like any other object and can have its properties accessed and modified the same way you would usually. For example:",
        "<code>myCar.turboType = \"twin\";</code>",
        "Our <code>myCar</code> variable now has a property <code>turboType</code> with a value of <code>\"twin\"</code>.",
        "In the editor, use the <code>Car</code> <code>constructor</code> to create a new <code>instance</code> and assign it to <code>myCar</code>.",
        "Then give <code>myCar</code> a <code>nickname</code> property with a string value."
      ],
      "tests":[
        "assert((new Car()).wheels === 4, 'message: The property <code>wheels</code> should still be <code>4</code> in the object <code>constructor</code>.');",
        "assert(typeof (new Car()).nickname === 'undefined', 'message: There should not be a property <code>nickname</code> in the object <code>constructor</code>.');",
        "assert(myCar.wheels === 4, 'message: The property <code>wheels</code> of <code>myCar</code> should equal <code>4</code>.');",
        "assert(typeof myCar.nickname === 'string', 'message: The property <code>nickname</code> of <code>myCar</code> should be a string.');"
      ],
      "challengeSeed":[
        "var Car = function() {",
        "  this.wheels = 4;",
        "  this.engines = 1;",
        "  this.seats = 1;",
        "};",
        "",
        "// Only change code below this line.",
        "",
        "var myCar;"
      ],
      "tail":[
        "(function() {return JSON.stringify(myCar);})();"
      ],
      "solutions":[
        "var Car = function() {\n  this.wheels = 4;\n  this.engines = 1;\n  this.seats = 1;\n};\n\nvar myCar = new Car();\n\nmyCar.nickname = \"Lucy\";"
      ],
      "challengeType":1,
      "type": "waypoint"
    },
    {
      "id":"563cfb55594311ffcb333c70",
      "title":"Make Unique Objects by Passing Parameters to our Constructor",
      "description":[
        "The <code>constructor</code> we have is great, but what if we don't always want to create the same object?",
        "To solve this we can add <code>parameters</code> to our <code>constructor</code>. We do this like the following example:",
        "<code>var Car = function(wheels, seats, engines) {</code>",
        "<code>&nbsp;&nbsp;this.wheels = wheels;</code>",
        "<code>&nbsp;&nbsp;this.seats = seats;</code>",
        "<code>&nbsp;&nbsp;this.engines = engines;</code>",
        "<code>};</code>",
        "Now we can pass in <code>arguments</code> when we call our <code>constructor</code>.",
        "<code>var myCar = new Car(6, 3, 1);</code>",
        "This code will create an object that uses the <code>arguments</code> we passed in and looks like:",
        "<code>{</code>",
        "<code>&nbsp;&nbsp;wheels: 6,</code>",
        "<code>&nbsp;&nbsp;seats: 3,</code>",
        "<code>&nbsp;&nbsp;engines: 1</code>",
        "<code>}</code>",
        "Now give it a try yourself! Alter the <code>Car</code> <code>constructor</code> to use <code>parameters</code> to assign values to the <code>wheels</code>, <code>seats</code>, and <code>engines</code> properties.",
        "Then call your new <code>constructor</code> with three number <code>arguments</code> and assign it to <code>myCar</code> to see it in action."
      ],
      "tests":[
        "assert((function(){var testCar = new Car(3,1,2); return testCar.wheels === 3 && testCar.seats === 1 && testCar.engines === 2;})(), 'message: Calling <code>new Car(3,1,2)</code> should produce an object with a <code>wheels</code> property of <code>3</code>, a <code>seats</code> property of <code>1</code>, and an <code>engines</code> property of <code>2</code>.');",
        "assert(typeof myCar.wheels === 'number' && typeof myCar.seats === 'number' && typeof myCar.engines === 'number', 'message: <code>myCar</code> should have number values for the <code>wheels</code>, <code>seats</code>, and <code>engines</code> properties.');"
      ],
      "challengeSeed":[
        "var Car = function() {",
        "  //Change this constructor",
        "  this.wheels = 4;",
        "  this.seats = 1;",
        "  this.engines = 1;",
        "};",
        "",
        "//Try it out here",
        "var myCar;",
        "",
        "// Only change code above this line",
        "",
        "(function() {return JSON.stringify(myCar);})();"
      ],
      "solutions":[
        "var Car = function(wheels,seats,engines) {\n  this.wheels = wheels;\n  this.seats = seats;\n  this.engines = engines;\n};\n\nvar myCar = new Car(4,1,1);"
      ],
      "challengeType":1,
      "type": "waypoint"
    },
    {
      "id":"cf1111c1c15feddfaeb3bdef",
      "title":"Make Object Properties Private",
      "description":[
        "Objects have their own attributes, called <code>properties</code>, and their own functions, called <code>methods</code>.",
        "In the previous challenges, we used the <code>this</code> keyword to reference <code>public properties</code> of the current object.",
        "We can also create <code>private properties</code> and <code>private methods</code>, which aren't accessible from outside the object.",
        "To do this, we create the variable inside the <code>constructor</code> using the <code>var</code> keyword we're familiar with, instead of creating it as a <code>property</code> of <code>this</code>.",
        "This is useful for when we need to store information about an object but we want to control how it is used by outside code.",
        "For example, what if we want to store the <code>speed</code> our car is traveling at but we only want outside code to be able to modify it by accelerating or decelerating, so the speed changes in a controlled way?",
        "In the editor you can see an example of a <code>Car</code> <code>constructor</code> that implements this pattern.",
        "Now try it yourself! Modify the <code>Bike</code> <code>constructor</code> to have a <code>private property</code> called <code>gear</code> and two <code>public methods</code> called <code>getGear</code> and <code>setGear</code> to get and set that value."
      ],
      "tests":[
        "assert(typeof myBike.getGear !== 'undefined' && typeof(myBike.getGear) === 'function', 'message: The method <code>getGear</code> of <code>myBike</code> should be accessible outside the object.');",
        "assert(typeof myBike.setGear !== 'undefined' && typeof(myBike.setGear) === 'function', 'message: The method <code>setGear</code> of <code>myBike</code> should be accessible outside the object.');",
        "assert(typeof myBike.gear === 'undefined', 'message: <code>myBike.gear</code> should remain undefined.');"
      ],
      "challengeSeed":[
        "var Car = function() {",
        "  // this is a private variable",
        "  var speed = 10;",
        "",
        "  // these are public methods",
        "  this.accelerate = function(change) {",
        "    speed += change;",
        "  };",
        "",
        "  this.decelerate = function() {",
        "    speed -= 5;",
        "  };",
        "",
        "  this.getSpeed = function() {",
        "    return speed;",
        "  };",
        "};",
        "",
        "var Bike = function() {",
        "",
        "  // Only change code below this line.",
        "",
        "",
        "",
        "  // Only change code above this line.",
        "};",
        "",
        "var myCar = new Car();",
        "",
        "var myBike = new Bike();"
      ],
      "tail":[
        "if(myBike.hasOwnProperty('getGear')){(function() {return JSON.stringify(myBike.getGear());})();}"
      ],
      "solutions":[
        "var Car = function() {\n  var speed = 10;\n\n  this.accelerate = function(change) {\n    speed += change;\n  };\n\n  this.decelerate = function() {\n    speed -= 5;\n  };\n\n  this.getSpeed = function() {\n    return speed;\n  };\n};\n\nvar Bike = function() {\n  var gear = 1;\n  \n  this.getGear = function() {\n    return gear;\n  };\n  \n  this.setGear = function(newGear) {\n    gear = newGear;\n  };\n};\n\nvar myCar = new Car();\n\nvar myBike = new Bike();"
      ],
      "challengeType":1,
      "type": "waypoint"
    }
  ]
}
