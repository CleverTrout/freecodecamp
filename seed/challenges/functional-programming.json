{
  "name": "Functional Programming",
  "order": 8,
  "time": "2h",
  "note": [
    "Methods",
    "Closures",
    "Factories",
    "Pure Functions",
    "Currying Functions",
    "Functors",
    "Currying Functions"
  ],
  "challenges": [
    {
      "id":"cf1111c1c15feddfaeb7bdef",
      "title":"Iterate over Arrays with .map",
      "description":[
        "The <code>map</code> method is a convenient way to iterate through arrays. Here's an example usage:",
        "<code>var timesFour = oldArray.map(function(val){</code>",
        "<code>&nbsp;&nbsp;return val * 4;</code>",
        "<code>});</code>",
        "",
        "The <code>map</code> method will iterate through every element of the array, creating a new array with values that have been modified by the callback function, and return it.",
        "In our example the callback only uses the value of the array element (the <code>val</code> argument) but your callback can also include arguments for the <code>index</code> and <code>array</code> being acted on.",
        "Use the map function to add 3 to every value in the variable <code>oldArray</code>."
      ],
      "tests":[
        "assert.deepEqual(newArray, [4,5,6,7,8], 'message: You should add three to each value in the array.');",
        "assert(editor.getValue().match(/\\.map\\s*\\(/gi), 'message: You should be making use of the <code>map</code> method.');",
        "assert(editor.getValue().match(/\\[1\\,2\\,3\\,4\\,5\\]/gi), 'message: You should only modify the array with <code>map</code>.');"
      ],
      "challengeSeed":[
        "var oldArray = [1,2,3,4,5];",
        "",
        "// Only change code below this line.",
        "",
        "var newArray = oldArray;",
        "",
        "// Only change code above this line.",
        "",
        "(function() {return newArray;})();"
      ],
      "challengeType":1,
      "type": "waypoint"
    },
    {
      "id":"cf1111c1c15feddfaeb8bdef",
      "title":"Condense arrays with .reduce",
      "description":[
        "The array method <code>reduce</code> is used to iterate through an array and condense it into one value.",
        "To use <code>reduce</code> you pass in a callback whose arguments are an accumulator (in this case, <code>previousVal</code>) and the current value (<code>currentVal</code>).",
        "<code>reduce</code> has an optional second argument which can be used to set the initial value of the accumulator. If no initial value is specified it will be the first array element and <code>currentVal</code> will start with the second array element.",
        "Here is an example of <code>reduce</code> being used to subtract all the values of an array:",
        "<code>var singleVal = array.reduce(function(previousVal, currentVal) {</code>",
        "<code>&nbsp;&nbsp;return previousVal - currentVal;</code>",
        "<code>}, 0);</code>",
        "Use the <code>reduce</code> method to sum all the values in <code>array</code> and assign it to <code>singleVal</code>."
      ],
      "tests":[
        "assert(singleVal == 30, 'message: <code>singleVal</code> should be equal to the sum of all items in the <code>array</code> variable.');",
        "assert(editor.getValue().match(/\\.reduce\\s*\\(/gi), 'message: You should have made use of the <code>reduce</code> method.');"
      ],
      "challengeSeed":[
        "var array = [4,5,6,7,8];",
        "",
        "// Only change code below this line.",
        "",
        "var singleVal = array;",
        "",
        "// Only change code above this line.",
        "",
        "(function() {return singleVal;})();"
      ],
      "challengeType":1,
      "type": "waypoint"
    },
    {
      "id":"cf1111c1c15feddfaeb9bdef",
      "title":"Filter Arrays with .filter",
      "description":[
        "The <code>filter</code> method is used to iterate through an array and filter out elements where a given condition is not true.",
        "<code>filter</code> is passed a callback function which takes the current value (we've called that <code>val</code>) as an argument.",
        "Any array element for which the callback returns true will be kept and elements that return false will be filtered out.",
        "The following code is an example of using filter to remove array elements that are not even numbers:",
        "Note: We omit the second and third arguments since we only need the value",
        "<code>array = array.filter(function(val) {</code>",
        "<code>&nbsp;&nbsp;return val % 2 === 0;</code>",
        "<code>});</code>",
        "Use <code>filter</code> to remove all elements from <code>array</code> that are greater than 5."
      ],
      "tests":[
        "assert.deepEqual(newArray, [1,2,3,4,5], 'message: You should have removed all the values from the array that are greater than 5.');",
        "assert(editor.getValue().match(/array\\.filter\\s*\\(/gi), 'message: You should be using the <code>filter</code> method to remove the values from the array.');",
        "assert(editor.getValue().match(/\\[1\\,2\\,3\\,4\\,5\\,6\\,7\\,8\\,9\\,10\\]/gi), 'message: You should only be using <code>filter</code> to modify the contents of the array.');"
      ],
      "challengeSeed":[
        "var oldArray = [1,2,3,4,5,6,7,8,9,10];",
        "",
        "// Only change code below this line.",
        "",
        "var newArray = oldArray;",
        "",
        "// Only change code above this line.",
        "",
        "(function() { return newArray; })();"
      ],
      "challengeType":1,
      "type": "waypoint"
    },
    {
      "id":"cf1111c1c16feddfaeb1bdef",
      "title": "Sort Arrays with .sort",
      "description":[
        "You can use the method <code>sort</code> to easily sort the values in an array alphabetically or numerically.",
        "Unlike the previous array methods we have been looking at, <code>sort</code> actually alters the array in place. However, it also returns this sorted array.",
        "<code>sort</code> can be passed a compare function as a callback. If no compare function is passed in it will convert the values to strings and sort alphabetically.",
        "Here is an example of using sort with a compare function that will sort the elements from smallest to largest number:",
        "<code>var array = [1, 12, 21, 2];</code>",
        "<code>array.sort(function(a, b) {</code>",
        "<code>&nbsp;&nbsp;return a - b;</code>",
        "<code>});</code>",
        "Use <code>sort</code> to sort <code>array</code> from largest to smallest."
      ],
      "tests":[
        "assert.deepEqual(array, [21, 12, 2, 1], 'message: You should have sorted the array from largest to smallest.');",
        "assert(editor.getValue().match(/\\[1,\\s*12,\\s*21,\\s*2\\];/gi), 'message: You should only be using <code>sort</code> to modify the array.');",
        "assert(editor.getValue().match(/\\.sort\\s*\\(/g), 'message: You should have made use of the <code>sort</code> method.');"
      ],
      "challengeSeed":[
        "var array = [1, 12, 21, 2];",
        "",
        "// Only change code below this line.",
        "",
        "array.sort();",
        "",
        "// Only change code above this line.",
        "",
        "(function() { return array; })();"
      ],
      "challengeType":1,
      "type": "waypoint"
    },
    {
      "id": "cf1111c1c16feddfaeb2bdef",
      "title": "Reverse Arrays with .reverse",
      "description": [
        "You can use the <code>reverse</code> method to reverse the elements of an array.",
        "<code>reverse</code> is another array method that alters the array in place, but it also returns the reversed array.",
        "Use <code>reverse</code> to reverse the <code>array</code> variable and assign it to <code>newArray</code>."
      ],
      "tests": [
        "assert.deepEqual(newArray, [7,6,5,4,3,2,1], 'message: You should reverse the array.');",
        "assert(editor.getValue().match(/\\.reverse\\s*\\(\\)/gi), 'message: You should use the <code>reverse</code> method.');",
        "assert(editor.getValue().match(/\\[1\\,2\\,3\\,4\\,5\\,6\\,7/gi), 'message: You should only be using <code>reverse</code> to modify <code>array</code>.');"
      ],
      "challengeSeed": [
        "var array = [1,2,3,4,5,6,7];",
        "",
        "// Only change code below this line.",
        "",
        "var newArray = array;",
        "",
        "// Only change code above this line.",
        ""
      ],
      "tail":[
        "(function() {return newArray;})();"
      ],
      "challengeType": 1,
      "type": "waypoint"
    },
    {
      "id": "cf1111c1c16feddfaeb3bdef",
      "title": "Concatenate Arrays with .concat",
      "description": [
        "<code>concat</code> can be used to merge the contents of two arrays into one.",
        "<code>concat</code> takes an array as an argument and returns a new array with the elements of this array concatenated onto the end.",
        "Here is an example of <code>concat</code> being used to concatenate <code>otherArray</code> onto the end of <code>oldArray</code>:",
        "<code>newArray = oldArray.concat(otherArray);</code>",
        "Use <code>.concat()</code> to concatenate <code>concatMe</code> onto the end of <code>oldArray</code> and assign it to <code>newArray</code>."
      ],
      "tests": [
        "assert.deepEqual(newArray, [1,2,3,4,5,6], 'message: You should concatenate the two arrays together.');",
        "assert(editor.getValue().match(/\\.concat\\s*\\(/gi), 'message: You should be using the <code>concat</code> method to merge the two arrays.');",
        "assert(editor.getValue().match(/\\[1\\,2\\,3\\]/gi) && editor.getValue().match(/\\[4\\,5\\,6\\]/gi), 'message: You should only be using <code>concat</code> to modify the arrays.');"
      ],
      "challengeSeed": [
        "var oldArray = [1,2,3];",
        "",
        "var concatMe = [4,5,6];",
        "",
        "// Only change code below this line.",
        "",
        "var newArray = oldArray;",
        "",
        "// Only change code above this line.",
        "",
        "(function() { return newArray; })();"
      ],
      "challengeType": 1,
      "type": "waypoint"
    },
    {
      "id":"cf1111c1c16feddfaeb4bdef",
      "title":"Split Strings with .split",
      "description":[
        "You can use the <code>split</code> method to split a string into an array.",
        "<code>split</code> uses the argument you pass in as a delimiter to determine which points the string should be split at.",
        "Here is an example of <code>split</code> being used to split an array at every <code>s</code> character:",
        "<code>var array = string.split('s');</code>",
        "Use <code>split</code> to create an array of words from <code>string</code> and assign it to <code>array</code>."
      ],
      "tests":[
        "assert(/\\.split\\(/gi, 'message: You should use the <code>split</code> method on the string.');",
        "assert(typeof(array) === 'object' && array.length === 5, 'message: You should split the string by its spaces.');"
      ],
      "challengeSeed":[
        "var string = \"Split me into an array\";",
        "",
        "// Only change code below this line.",
        "",
        "var array = string;",
        "",
        "// Only change code above this line.",
        "",
        "(function() {return array;})();"
      ],
      "challengeType":1,
      "type": "waypoint"
    },
    {
      "id":"cf1111c1c16feddfaeb5bdef",
      "title":"Join Strings with .join",
      "description":[
        "We can use the <code>join</code> method to join each element of an array into a string separated by whatever delimiter you provide as an argument.",
        "The following is an example of using <code>join</code> to join all of the elements of an array into a string with all the elements separated by word `Na`:",
        "<code>var joinMe = [\"Na \", \"Na \", \"Na \", \"Na \", \"Batman!\"];</code>",
        "<code>var joinedString = joinMe.join(\"Na \");</code>",
        "<code>console.log(joinedString);</code>",
        "Use the <code>join</code> method to create a string from <code>joinMe</code> with spaces in between each element and assign it to <code>joinedString</code>."
      ],
      "tests":[
        "assert(typeof(joinedString) === 'string' && joinedString === \"Split me into an array\", 'message: You should join the elements of the array with spaces.');",
        "assert(/\\.join\\(/gi, 'message: You should use of the <code>join</code> method on the array.');"
      ],
      "challengeSeed":[
        "var joinMe = [\"Split\",\"me\",\"into\",\"an\",\"array\"];",
        "",
        "// Only change code below this line.",
        "",
        "var joinedString = joinMe;",
        "",
        "// Only change code above this line.",
        "",
        "(function() {return joinedString;})();"
      ],
      "challengeType":1,
      "type": "waypoint"
    }
  ]
}
